name: Check Tool Updates

on:
  schedule:
    - cron: '0 9 * * *'  # Every day at 9 AM
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  check-updates:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
      
      - name: Check for updates and create PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Read current versions
          declare -A current_versions
          current_versions[helix]=$(yq '.versions.helix' .chezmoidata.yaml)
          current_versions[ripgrep]=$(yq '.versions.ripgrep' .chezmoidata.yaml)
          current_versions[eza]=$(yq '.versions.eza' .chezmoidata.yaml)
          current_versions[dust]=$(yq '.versions.dust' .chezmoidata.yaml)
          current_versions[zellij]=$(yq '.versions.zellij' .chezmoidata.yaml)
          current_versions[taplo]=$(yq '.versions.taplo' .chezmoidata.yaml)
          current_versions[ruff]=$(yq '.versions.ruff' .chezmoidata.yaml)
          current_versions[uv]=$(yq '.versions.uv' .chezmoidata.yaml)
          current_versions[pyright]=$(yq '.versions.pyright' .chezmoidata.yaml)
          current_versions[prettier]=$(yq '.versions.prettier' .chezmoidata.yaml)
          current_versions[claude_code]=$(yq '.versions.claude_code' .chezmoidata.yaml)
          
          # GitHub repos for each tool
          declare -A repos
          repos[helix]="helix-editor/helix"
          repos[ripgrep]="BurntSushi/ripgrep"
          repos[eza]="eza-community/eza"
          repos[dust]="bootandy/dust"
          repos[zellij]="zellij-org/zellij"
          repos[taplo]="tamasfe/taplo"
          repos[ruff]="astral-sh/ruff"
          repos[uv]="astral-sh/uv"
          repos[pyright]="microsoft/pyright"
          repos[prettier]="prettier/prettier"
          
          # Check for updates
          updates_found=false
          updates_summary=""
          
          # Check GitHub releases
          for tool in "${!repos[@]}"; do
            repo="${repos[$tool]}"
            current="${current_versions[$tool]}"
            
            # Get latest release
            latest=$(curl -s "https://api.github.com/repos/$repo/releases/latest" | jq -r '.tag_name' || echo "")
            
            # Normalize versions (remove 'v' prefix for comparison)
            current_normalized="${current#v}"
            latest_normalized="${latest#v}"
            
            if [[ -n "$latest" && "$current_normalized" != "$latest_normalized" ]]; then
              echo "Update found for $tool: $current -> $latest"
              updates_found=true
              updates_summary+="- $tool: $current → $latest\n"
              
              # Update the yaml file
              yq -i ".versions.$tool = \"$latest\"" .chezmoidata.yaml
            fi
          done
          
          # Check npm packages
          declare -A npm_packages
          npm_packages[claude_code]="@anthropic-ai/claude-code"
          npm_packages[prettier]="prettier"
          npm_packages[pyright]="pyright"
          
          for tool in "${!npm_packages[@]}"; do
            package="${npm_packages[$tool]}"
            current="${current_versions[$tool]}"
            
            # Get latest version from npm
            latest=$(curl -s "https://registry.npmjs.org/$package/latest" | jq -r '.version' || echo "")
            
            if [[ -n "$latest" && "$current" != "$latest" ]]; then
              echo "Update found for $tool: $current -> $latest"
              updates_found=true
              updates_summary+="- $tool: $current → $latest\n"
              
              # Update the yaml file
              yq -i ".versions.$tool = \"$latest\"" .chezmoidata.yaml
            fi
          done
          
          # Create PR if updates found
          if [[ "$updates_found" == "true" ]]; then
            # Configure git
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            
            # Create branch
            branch="update-tools-$(date +%Y%m%d)"
            git checkout -b "$branch"
            
            # Commit changes
            git add .chezmoidata.yaml
            git commit -m "chore: update tool versions

$updates_summary"
            
            # Push branch
            git push origin "$branch"
            
            # Create PR
            gh pr create \
              --title "chore: update tool versions" \
              --body "## Tool Updates

$updates_summary

This PR was automatically created by the update-versions workflow." \
              --base main \
              --head "$branch"
          else
            echo "All tools are up to date!"
          fi