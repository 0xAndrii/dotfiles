#!/bin/bash
set -e

# Core development tools

source /etc/os-release
ARCH=$(uname -m)

# Versions
HELIX_VERSION="{{ .tools.helix.version }}"
EZA_VERSION="{{ .tools.eza.version }}"
DUST_VERSION="{{ .tools.dust.version }}"
ZELLIJ_VERSION="{{ .tools.zellij.version }}"
TAPLO_VERSION="{{ .tools.taplo.version }}"
RCLONE_VERSION="{{ .tools.rclone.version }}"

# Colors
GREEN='\033[0;32m'
NC='\033[0m'

echo "[2/5] Installing development tools..."

# Ensure ~/.local/bin exists
mkdir -p $HOME/.local/bin

# Helix
if ! command -v hx &> /dev/null || [[ $(hx --version 2>/dev/null | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1) != "${HELIX_VERSION}" ]]; then
    echo "  → Installing Helix v${HELIX_VERSION}..."
    cd /tmp
    curl -sL -o helix.tar.xz "https://github.com/helix-editor/helix/releases/download/${HELIX_VERSION}/helix-${HELIX_VERSION}-${ARCH}-linux.tar.xz"
    tar xf helix.tar.xz
    mv "helix-${HELIX_VERSION}-${ARCH}-linux/hx" $HOME/.local/bin/
    chmod +x $HOME/.local/bin/hx
    mkdir -p $HOME/.local/share/helix
    cp -r "helix-${HELIX_VERSION}-${ARCH}-linux/runtime" $HOME/.local/share/helix/
    rm -rf helix.tar.xz "helix-${HELIX_VERSION}-${ARCH}-linux"
    echo -e "  ${GREEN}✓${NC} Helix installed"
else
    echo -e "  ${GREEN}✓${NC} Helix already up to date"
fi

# Ripgrep
RIPGREP_VERSION="{{ .tools.ripgrep.version }}"
if ! command -v rg &> /dev/null || [[ $(rg --version 2>/dev/null | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1) != "$RIPGREP_VERSION" ]]; then
    echo "  → Installing Ripgrep v${RIPGREP_VERSION}..."
    cd /tmp
    if [[ "$ARCH" == "x86_64" ]]; then
        curl -sL -o ripgrep.tar.gz "https://github.com/BurntSushi/ripgrep/releases/download/${RIPGREP_VERSION}/ripgrep-${RIPGREP_VERSION}-x86_64-unknown-linux-musl.tar.gz"
    else
        curl -sL -o ripgrep.tar.gz "https://github.com/BurntSushi/ripgrep/releases/download/${RIPGREP_VERSION}/ripgrep-${RIPGREP_VERSION}-aarch64-unknown-linux-gnu.tar.gz"
    fi
    tar xzf ripgrep.tar.gz
    mv ripgrep-*/rg $HOME/.local/bin/
    chmod +x $HOME/.local/bin/rg
    rm -rf ripgrep.tar.gz ripgrep-*/
    echo -e "  ${GREEN}✓${NC} Ripgrep installed"
else
    echo -e "  ${GREEN}✓${NC} Ripgrep already installed"
fi

# Eza
if ! command -v eza &> /dev/null || [[ $(eza --version 2>/dev/null | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | head -1) != "$EZA_VERSION" ]]; then
    echo "  → Installing Eza ${EZA_VERSION}..."
    cd /tmp
    if [[ "$ARCH" == "x86_64" ]]; then
        curl -sL -o eza.zip "https://github.com/eza-community/eza/releases/download/${EZA_VERSION}/eza_x86_64-unknown-linux-gnu.zip"
    else
        curl -sL -o eza.zip "https://github.com/eza-community/eza/releases/download/${EZA_VERSION}/eza_aarch64-unknown-linux-gnu.zip"
    fi
    unzip -oq eza.zip >/dev/null
    mv eza $HOME/.local/bin/
    chmod +x $HOME/.local/bin/eza
    rm eza.zip
    echo -e "  ${GREEN}✓${NC} Eza installed"
else
    echo -e "  ${GREEN}✓${NC} Eza already up to date"
fi

# Dust
if ! command -v dust &> /dev/null || [[ $(dust --version 2>/dev/null | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1) != "${DUST_VERSION#v}" ]]; then
    echo "  → Installing Dust ${DUST_VERSION}..."
    cd /tmp
    if [[ "$ARCH" == "x86_64" ]]; then
        curl -sL -o dust.tar.gz "https://github.com/bootandy/dust/releases/download/${DUST_VERSION}/dust-${DUST_VERSION}-x86_64-unknown-linux-gnu.tar.gz"
    else
        curl -sL -o dust.tar.gz "https://github.com/bootandy/dust/releases/download/${DUST_VERSION}/dust-${DUST_VERSION}-aarch64-unknown-linux-gnu.tar.gz"
    fi
    tar xzf dust.tar.gz
    mv dust-*/dust $HOME/.local/bin/
    chmod +x $HOME/.local/bin/dust
    rm -rf dust.tar.gz dust-*/
    echo -e "  ${GREEN}✓${NC} Dust installed"
else
    echo -e "  ${GREEN}✓${NC} Dust already up to date"
fi

# Zellij
if ! command -v zellij &> /dev/null || [[ $(zellij --version 2>/dev/null | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1) != "${ZELLIJ_VERSION#v}" ]]; then
    echo "  → Installing Zellij ${ZELLIJ_VERSION}..."
    cd /tmp
    if [[ "$ARCH" == "x86_64" ]]; then
        curl -sL -o zellij.tar.gz "https://github.com/zellij-org/zellij/releases/download/${ZELLIJ_VERSION}/zellij-x86_64-unknown-linux-musl.tar.gz"
    else
        curl -sL -o zellij.tar.gz "https://github.com/zellij-org/zellij/releases/download/${ZELLIJ_VERSION}/zellij-aarch64-unknown-linux-musl.tar.gz"
    fi
    tar xzf zellij.tar.gz
    mv zellij $HOME/.local/bin/
    chmod +x $HOME/.local/bin/zellij
    rm zellij.tar.gz
    echo -e "  ${GREEN}✓${NC} Zellij installed"
else
    echo -e "  ${GREEN}✓${NC} Zellij already up to date"
fi

# Taplo
if ! command -v taplo &> /dev/null; then
    echo "  → Installing Taplo v${TAPLO_VERSION}..."
    cd /tmp
    if [[ "$ARCH" == "x86_64" ]]; then
        curl -sL -o taplo.gz "https://github.com/tamasfe/taplo/releases/download/${TAPLO_VERSION}/taplo-linux-x86_64.gz"
    else
        curl -sL -o taplo.gz "https://github.com/tamasfe/taplo/releases/download/${TAPLO_VERSION}/taplo-linux-aarch64.gz"
    fi
    gunzip taplo.gz
    mv taplo $HOME/.local/bin/
    chmod +x $HOME/.local/bin/taplo
    echo -e "  ${GREEN}✓${NC} Taplo installed"
else
    echo -e "  ${GREEN}✓${NC} Taplo already installed"
fi

# Rclone
if ! command -v rclone &> /dev/null || [[ $(rclone --version 2>/dev/null | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1) != "${RCLONE_VERSION#v}" ]]; then
    echo "  → Installing Rclone ${RCLONE_VERSION}..."
    cd /tmp
    if [[ "$ARCH" == "x86_64" ]]; then
        curl -sL -o rclone.zip "https://downloads.rclone.org/${RCLONE_VERSION}/rclone-${RCLONE_VERSION}-linux-amd64.zip"
    else
        curl -sL -o rclone.zip "https://downloads.rclone.org/${RCLONE_VERSION}/rclone-${RCLONE_VERSION}-linux-arm64.zip"
    fi
    unzip -q rclone.zip
    mv rclone-*/rclone $HOME/.local/bin/
    chmod +x $HOME/.local/bin/rclone
    rm -rf rclone.zip rclone-*
    echo -e "  ${GREEN}✓${NC} Rclone installed"
else
    echo -e "  ${GREEN}✓${NC} Rclone already up to date"
fi